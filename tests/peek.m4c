/*
 * Test of the peek operation
*/

#include "common.h"

include(template/common.m4)

void test_peek() {
    char *a = (char *) malloc(16);
    char *b = (char *) malloc(16);
    char *c = (char *) malloc(16);
    char *d = (char *) malloc(16);
    char *output = CWUTILS_NULL;
    struct StringStack *my_stack = M4STACK_INIT(my_stack, STRING_STACK);

    strcpy(a, "foo");
    strcpy(b, "bar");
    strcpy(c, "baz");
    strcpy(d, "tuna");

    M4STACK_PUSH(my_stack, a, STRING_STACK);
    M4STACK_PUSH(my_stack, b, STRING_STACK);
    M4STACK_PUSH(my_stack, c, STRING_STACK);
    M4STACK_PUSH(my_stack, d, STRING_STACK);

    M4STACK_PEEK(my_stack, output);
    ASSERT_STREQ(output, "tuna");
    ASSERT_NUMEQ(my_stack->length, 4);
    ASSERT_NUMEQ(my_stack->capacity, M4STACK_INITIAL_LENGTH * 2);

    M4STACK_POP(my_stack, output, STRING_STACK);

    M4STACK_PEEK(my_stack, output);
    ASSERT_STREQ(output, "baz");
    ASSERT_NUMEQ(my_stack->length, 3);
    ASSERT_NUMEQ(my_stack->capacity, M4STACK_INITIAL_LENGTH * 2);

    M4STACK_POP(my_stack, output, STRING_STACK);

    M4STACK_PEEK(my_stack, output);
    ASSERT_STREQ(output, "bar");
    ASSERT_NUMEQ(my_stack->length, 2);
    ASSERT_NUMEQ(my_stack->capacity, M4STACK_INITIAL_LENGTH * 2);

    M4STACK_POP(my_stack, output, STRING_STACK);

    M4STACK_PEEK(my_stack, output);
    ASSERT_STREQ(output, "foo");
    ASSERT_NUMEQ(my_stack->length, 1);
    ASSERT_NUMEQ(my_stack->capacity, M4STACK_INITIAL_LENGTH * 2);
    M4STACK_POP(my_stack, output, STRING_STACK);

    M4STACK_FREE(my_stack, STRING_STACK);
}
int main() {
    test_peek(); 

    return 0;
}
