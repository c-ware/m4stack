.TH "m4stack-example-tree" "cware" "Oct 14, 2022" "" "C-Ware Manuals"
.SH NAME
m4stack-example-tree - tree command implemented with m4stack
.SH DESCRIPTION
This is an basic example of a tree command, which recursively lists
directories and files. Since its using m4stack, which is a stack
implementation, it is performed using depth-first search.
.SH EXAMPLES
#include <stdio.h>
.br
#include <stdlib.h>
.br
#include <dirent.h>
.br
#include <string.h>
.br
#include <sys/stat.h>
.br

#include "m4stack/liberror.h"

// M4 related junk, like getting m4stack included and
.br
// defining data structure properties.
.br

.br

.br

.br

M4STACK_DECLARE(PathStack, char *);

char *copy_string(const char *string) {
    char *new_string = CWUTILS_NULL;

    LIBERROR_IS_NULL(string, "string");

    new_string = malloc(sizeof(char) * strlen(string) + 1);

    LIBERROR_MALLOC_FAILURE(new_string, "new_string");

    strncpy(new_string, string, strlen(string) + 1);

    return new_string;
.br
}

int is_direc(const char *path) {
    struct stat stat_buffer;
    int response = 0;

    if((response = stat(path, &stat_buffer)) == -1)
        return 0;

    if((stat_buffer.st_mode & S_IFMT) != S_IFDIR)
        return 0;

    return 1;
.br
}

int main() {
    int path_buffer_capacity = 128 + 1;
    char *path_buffer = CWUTILS_NULL;
    struct PathStack *directories = CWUTILS_NULL;

    directories = M4STACK_INIT(directories, PATH);
    path_buffer = malloc(sizeof(char) * 128 + 1);

    M4STACK_VERIFY(directories);
    LIBERROR_MALLOC_FAILURE(path_buffer, "path_buffer");
    M4STACK_PUSH(directories, copy_string("."), PATH);

    // Exhaust directories until there are no more
    while(M4STACK_IS_EMPTY(directories) == 0) {
        DIR *directory_ptr = CWUTILS_NULL;
        char *next_directory = CWUTILS_NULL;
        struct dirent *entry = CWUTILS_NULL;

        // Pop the next directory, load it, and scan its contents.
        // This will separate files, which will be printed to the stdout,
        // and directories, which will be pushed to continue the cycle.
        M4STACK_POP(directories, next_directory, PATH);
        LIBERROR_IS_NULL(next_directory, "next_directory");
  
        // Load the file path into the reused memory buffer, then read it
        // through dirent. This buffer will be reused when making the full
        // paths to new directories to push. But, if the length of the
        // directory name is too big, resize the buffer.
        if(strlen(next_directory) > (path_buffer_capacity - 1)) {
            path_buffer = realloc(path_buffer, sizeof(char) * (strlen(next_directory) + 1));
            path_buffer_capacity = strlen(next_directory) + 1;


            LIBERROR_MALLOC_FAILURE(path_buffer, "path_buffer");
        }

        strncpy(path_buffer, next_directory, strlen(next_directory) + 1);

        // Scan the directory, pushing new directories, and displaying
        // files.
        directory_ptr = opendir(next_directory);

        LIBERROR_IS_NULL(directory_ptr, "directory_ptr");

        // For each directory entry, build the full path to it.
        while((entry = readdir(directory_ptr)) != NULL) {
            if(strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
                continue;

            if((strlen(entry->d_name) + strlen(next_directory) + 1) > (path_buffer_capacity - 1)) {
                path_buffer = realloc(path_buffer, sizeof(char) * (strlen(entry->d_name) + strlen(next_directory) + 1 + 1));
                path_buffer_capacity = strlen(entry->d_name) + strlen(next_directory) + 1 + 1;

                LIBERROR_MALLOC_FAILURE(path_buffer, "path_buffer");
            }

            sprintf(path_buffer, "%s/%s", next_directory, entry->d_name);

            // Enstack directories
            if(is_direc(path_buffer) == 1) {
                M4STACK_PUSH(directories, copy_string(path_buffer), PATH);
            }

            printf("%s", path_buffer);
        }

        free(next_directory);
        closedir(directory_ptr);
    }

    M4STACK_FREE(directories, PATH);
    free(path_buffer);

    return 0;
}
.SH SEE ALSO
cware(cware), m4stack(cware)